package WebGUI::Image::Graph::Pie;

use strict;
use WebGUI::Image::Graph::GD;
use GD::Graph;
use GD::Graph::pie;

our @ISA = qw(WebGUI::Image::Graph::GD);

=head1 NAME

Package WebGUI::Image::Graph::Pie

=head1 DESCRIPTION

Package to create pie charts, both 2d and 3d.

=head1 SYNOPSIS

Pie charts, such as generated by the Poll asset.

=head1 METHODS

These methods are available from this class:

=cut

=head2 new( [width, height] )

Contstructor. See SUPER classes for additional parameters.
Defaults to 300x300.

L<WebGUI::Image> uses the L<Imager> library, but this subclasses L<WebGUI::Image::Graph::GD>,
which replaces the L<Imager> implementation with a L<GD::Graph> implementation.

=cut

sub new {
    my $class = shift;
    my $session = shift;

    my $width = shift || 300;
    my $height = shift || 300;

    my $img = GD::Graph::pie->new( $width, $height, ) or die;

    my $self = bless {
        _image => $img,
        _session => $session,
        _properties => {
            width   => $width,
            height  => $height,
        },
    }, $class;

    $self->setBackgroundColor( $self->getBackgroundColor );  # the set methoid clears the image

    return $self;
}

=head2 configurationForm ( )

Called to compose the asset's edit view "Graphing" tab.
See WebGUI::Image::Graph for documentation.

=cut

sub configurationForm {
	my $self = shift;
    my $tab  = shift;

    $self->SUPER::configurationForm($tab);
	my $i18n = WebGUI::International->new($self->session, 'Image_Graph_Pie');

	$tab->addField('float',
		name		=> 'pie_topHeight',
		value		=> $self->getTopHeight,
		label		=> $i18n->get('pie height'),
		hoverHelp	=> $i18n->get('pie height description'),
	);
    $tab->addField('float',
        name        => 'pie_tiltAngle',
        value       => $self->getTiltAngle,
        label       => $i18n->get('tilt angle'), 
        hoverHelp   => $i18n->get('tilt angle description'),
    );
	$tab->addField('float',
		name		=> 'pie_startAngle',
		value		=> $self->getStartAngle,
		label		=> $i18n->get('start angle'),
		hoverHelp	=> $i18n->get('start angle description'),
	);
}

=head2 draw ( )

Draws the pie chart.

=cut

sub draw {

    my $self = shift;

    my $dataset = $self->getDataset(0);  # 0th dataset; pie charts only plot one
    my $labels = $self->getLabel();

    # don't die if there is no data
    if( ! $dataset or ! @$dataset ) {
        $dataset = [1];
        $labels = ['No Votes Yet'];
    }

    # "Colour 2 is not defined, reverting to black at /usr/local/lib/perl5/site_perl/5.16.1/GD/Graph.pm line 300." happens during the plot() when we do it this way, which is the way we're supposed to do it:
    #    my $bg = $self->image->gd->colorAllocate( $self->to_rgb_triplet( $self->getBackgroundColor ) );
    #    $self->image->set( bgclr => $bg );

    $self->image->set( bgclr => $self->getBackgroundColor );  # but this seems to work

    if( $self->getLabelFont and $self->getLabelFontSize ) {
        # $self->image->set_legend_font($self->getLabelFont, $self->getLabelFontSize); # okay, GD::Graph::pie doesn't have a legend font
        $self->image->set_value_font($self->getLabelFont, $self->getLabelFontSize);
    }
    if( $self->getLabelColor ) {
        $self->image->set( labelclr => $self->getLabelColor );
    }

    $self->image->set( start_angle => $self->getStartAngle ) if $self->getStartAngle;
    $self->image->set( top_height => $self->getTopHeight ) if $self->getTopHeight;
    $self->image->set( '3d' => $self->getTiltAngle );  # 0 or true; do this unconditionally

    $self->image->plot([ $labels, $dataset ]) or die "plot failed";

}

=head2 formNamespace ( )

Extends the form namespace for this object. See WebGUI::Image::Graph for
documentation.

=cut

sub formNamespace {
	my $self = shift;

	return $self->SUPER::formNamespace.'_Pie';
}

=head2 getConfiguration ( )

Returns a configuration hashref. See WebGUI::Image::Graph for documentation.

=cut

sub getConfiguration {
	my $self = shift;

	my $config = $self->SUPER::getConfiguration;

    $config->{pie_tiltAngle}    = $self->getTiltAngle;
	$config->{pie_startAngle}	= $self->getStartAngle;
	$config->{pie_topHeight}	= $self->getTopHeight;
	return $config;
}

=head2 setConfiguration ( config )

Applies the settings in the given configuration hash. See WebGUI::Image::Graph
for more information.

=head2 config

A configuration hash.

=cut

sub setConfiguration {
	my $self = shift;
	my $config = shift;

	$self->SUPER::setConfiguration($config);

	$self->setTiltAngle($config->{pie_tiltAngle});
	$self->setStartAngle($config->{pie_startAngle});
	$self->setTopHeight($config->{pie_topHeight});
	
	return $config;
}


=head2 getDataset ( )

Returns the first dataset that is added. Pie charts can only handle one dataset
and therefore the first added dataset is used.

=cut

sub getDataset {
	my $self = shift;

	return $self->SUPER::getDataset(0);
}

=head2 getStartAngle ( )

Rteurn the initial angle of the first slice. In effect all slices are rotated by
this value.

=cut

sub getStartAngle {
	my $self = shift;

	return $self->{_pieProperties}->{startAngle} || 0;
}

=head2 setStartAngle ( angle )

Sets the initial angle of the first slice. In effect all slices are rotated by
this value.

=head3 angle

The desired start angle in degrees.

=cut

sub setStartAngle {
	my $self = shift;
	my $angle = shift;

	$self->{_pieProperties}->{startAngle} = $angle;
}

=head2 getTopHeight ( )

Returns the thickness of the top of the pie in pixels. Defaults to 20 pixels.

=cut

sub getTopHeight {
	my $self = shift;

	return 20 unless (defined $self->{_pieProperties}->{topHeight});
	return $self->{_pieProperties}->{topHeight};
}

=head2 setTopHeight ( thickness )

Sets the thickness of the top of the pie in pixels. Defaults to 20 pixels.

=head3 thickness

The thickness of the top in pixels.

=cut

sub setTopHeight {
	my $self = shift;
	my $height = shift;

	$self->{_pieProperties}->{topHeight} = $height;
}

=head2 setTiltAngle( $angle )

=head2 getTiltAngle( )

In wG7, this is the angle between the screen and the pie chart, from 0 to 90.
Currently recognized values are 0 for a 2D pie chart or 1 or greater for a 3D pie chart.
Defaults to a 3D pie chart.

=cut

=head2 setTiltAngle ( angle )

Sets the angle between the screen and the pie chart. Valid angles are 0 to 90
degrees. Zero degrees results in a 2d pie where other values will generate a 3d
pie chart. Defaults to 55 degrees.

=head3 angle

The tilt angle. Must be in the range from  0 to 90. If a value less than zero is
passed the angle will be set to 0. If a value greater than 90 is passed the
angle will be set to 90.

=cut        

sub setTiltAngle {
    my $self = shift;
    my $angle = shift;

    $angle = 0 if ($angle < 0);
    $angle = 90 if ($angle > 90);

    $self->{_pieProperties}->{tiltAngle} = $angle;
}

sub getTiltAngle {
    my $self = shift;
    my $angle = shift;

    return 55 unless defined $self->{_pieProperties}->{tiltAngle};
    return $self->{_pieProperties}->{tiltAngle};
}

1;
